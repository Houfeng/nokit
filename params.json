{"name":"Nokit","tagline":"A Web development framework","body":"## 简介\r\nNokit 是一个简单易用的基于 Nodejs 的 Web 开发框架，默认提供了 MVC / NSP / REST 等支持，并提供对应项目模板。\r\nNokit 核心非常简洁，大多数功能以扩展形式存在，开发人员也可以方便的为 Nokit 添加新的扩展。\r\n\r\n[![npm version](https://badge.fury.io/js/nokitjs.svg)](http://badge.fury.io/js/nokitjs)\r\n[![Build Status](https://travis-ci.org/nokitjs/nokit.svg?branch=master)](https://travis-ci.org/nokitjs/nokit) \r\n\r\n## 社区\r\n1. wiki文档 [wiki](https://github.com/nokitjs/nokit/wiki)\r\n2. 问题反馈 [issues](https://github.com/nokitjs/nokit/issues)\r\n4. QQ群: 240603160 \r\n\r\n## 安装和更新\r\n\r\n#### 安装 nokit\r\n```javascript\r\n[sudo] npm install nokitjs [-g]\r\n```\r\n\r\n#### 更新 nokit\r\n```javascript\r\n[sudo] npm update nokitjs [-g]\r\n```\r\n\r\n## 命令行工具\r\n使用 “命令行工具” 时必须全局安装 nokitjs (全局安装的同时也可以在 app 中本地安装 nokitjs)\r\nNokit 应用只需在磁盘建立应用目录，并新建相关文件和目录即可， Nokit 提供了方便的命令行工具。\r\n命令行工具还提供进程管理相关功能，确保应用能够持续稳定的运行，并能在遇到故障时快速自动恢复。\r\n\r\n#### 查看版本\r\n```javascript\r\n[sudo] nokit [?]\r\n```\r\n\r\n#### 创建应用\r\n```javascript\r\n[sudo] nokit create [name] [mvc|nsp|rest] [folder] \r\n```\r\n以上命令会生成一个最简单的应用所需要的目录结构和配置。\r\n\r\n1. name 一般不建议省略（省略时为 nokit-app），name 将会作为应用的根目录名称\r\n2. type 默认为 mvc 也可以指定为 nsp 或 rest ，指定类型后将会创建对应的应用模板\r\n3. folder 为目标目录，省略时将默认为当前所在目录。\r\n \r\n\r\n#### 运行应用\r\n```javascript\r\n[sudo] nokit start [port] [root] [-env:<name>] [-cluster[:num]] [-watch[:.ext,...]] [node-opts]\r\n```\r\n1. -env 指定运行配置名称，将会根据 \"配置名称\" 加载 app.xxx.json (xxx 为指定的配置名称) 作为应用配置文件。\r\n2. -cluster 选项可以开启 \"单机集群模式\"，使应用有效的利用多核 CPU，也使应用更加健壮可靠，-cluster 选项可以指定进程数，如 -cluster:4 ，默认为 CPU 核数。\r\n3. -watch 选项开启后，在应用文件发生改变时会自动完成进程重启，默认任何文件变更都将触发重启，也可以指定文件类型，如 -watch:.js,.html,.css\r\n4. -public 一般用于为 html/js/css 等静态资源启动一个临时 WebServer，指定静态资源目录，静态资源目录为 root 的相对目录。\r\n5. --debug 为 nodejs 选项，可以开启 debug 模式，开启后可以使用 nodejs 内置调试工具调式，也可以使用 node-inspector 等工具进行调试。\r\n\r\n#### 停止应用\r\n```javascript\r\n[sudo] nokit stop [pid|all]\r\n```\r\n可以指定 pid (进程ID，可以用过 nokit list 查看)，停止指定的的应用，也可以省略停止所有应用\r\n\r\n#### 重启应用\r\n```javascript\r\n[sudo] nokit restart [pid|all]\r\n```\r\n可以指定 pid (进程ID，可以用过 nokit list 查看)，重启指定的的应用，也可以省略重启所有应用\r\n\r\n#### 查看运行中的应用\r\n```javascript\r\n[sudo] nokit list\r\n```\r\n查看所有已启动的应用\r\n\r\n#### 开机自启动\r\n```javascript\r\n[sudo] nokit autostart [on|off] [-uid:[domain\\]user [-pwd:password]] \r\n```\r\nautostart 命令目前支持 win32 和 linux 平台，此命令需要管理员权限，如 ubuntu 需要使用 sodu ，\r\n在 windows 平台会弹出 \"用户账户控制\" 提示框。\r\n-uid 和 -pwd 参数仅在 win32 平台有效，其它平台将被忽略，在不指定 -uid 、-pwd 参数时，需有用户登录到 windows \r\n才会自动启动 Nokit App，当指定 -uid、-pwd 时，只要启动 windows 就会自动启动 Nokit App。\r\n无论是登录 windows 的账户或是通过 -uid 提定的账户，需要是安装 nodejs 和 npm 时所用的账户。\r\n\r\n## 代码引用\r\n除了使用命令行工具，也可以在代码中引用 nokit 的方式来运行 nokit 应用，\r\n在代码中引用 nokit，将不能利用 nokit 的进程管理功能，这时可以直接运行，或者使用 pm2 / forever 等工具进行管理。\r\n```javascript\r\nvar nokit = require(\"nokitjs\");\r\nvar server = new nokit.Server({\r\n    root : \"应用根目录\",\r\n    port : 8000\r\n});\r\nserver.start();\r\n```\r\n\r\n无论任种方式，启动成功后，即可浏览器访问 \"http://localhost:8000\" (端口请换成具体应用的正确的端口)，\r\n如简单的示例 [http://jser.cc](http://jser.cc)\r\n\r\n## NSP\r\nNSP 全称为 Nokit Server Pages 是一种类似 asp / php 的 Web 应用开发模式，\r\nNSP 支持 include 引用其它页面，也支持 master 母板页技术。\r\n\r\n一般目录结构\r\n```javascript\r\n根目录\r\n│ app.js\r\n│ config.json\r\n├─layout\r\n│     date.nsp\r\n│     master.nsp\r\n├─model\r\n└─public\r\n    │  index.nsp\r\n    │  index.nsp.js\r\n    └─style\r\n         common.css\r\n```\r\n\r\nNSP 页面 (*.nsp) 基本介绍\r\n```html\r\n<!-- 输出内容 -->\r\n<p> <%= \"输出内容\" %> </p>\r\n<!-- this 指向页面处理器，无处理器页面指向默认处理器对象 -->\r\n<p> <%= this.context.request.formData(\"name\") %> </p>\r\n\r\n<!-- 循环 -->\r\n<ul> \r\n<% $.each(this.list,function(i,item){ %>\r\n    <li><%= item.name %></li>\r\n<% }) %>\r\n</ul>\r\n\r\n<!-- 分支 -->\r\n<% if(this.type=='a'){ %>\r\n<span>a</span>\r\n<% }else{ %>\r\n<span>b</span>\r\n<% } %>\r\n\r\n<!-- 包含 -->\r\n<% $.include(\"../layout/head.nsp\") %>\r\n\r\n<!-- 母板页 -->\r\n<html>\r\n...\r\n<div> <% $.placeHolder(\"content1\") %> </div>\r\n...\r\n<div> <% $.placeHolder(\"content2\") %> </div>\r\n...\r\n</html>\r\n\r\n<!-- 内容页 -->\r\n<% $.master(\"./master.nsp\") %>\r\n\r\n<% $.placeBegin(\"content1\") %>\r\n<span>content1</span>\r\n<% $.placeEnd() %>\r\n\r\n<% $.placeBegin(\"content2\") %>\r\n<span>content2</span>\r\n<% $.placeEnd() %>\r\n```\r\n\r\nNSP 页面处理器 (*.nsp.js) 基本介绍\r\n```javascript\r\n//定义页面处理器类型\r\nvar IndexPresenter = module.exports = function() {};\r\n\r\n//初始化方法，每次回发都将触发 init 方法\r\nIndexPresenter.prototype.init = function() {\r\n    var self = this;\r\n    /*\r\n    self.server //当前 server 实例\r\n    self.context //当前请上下文对象\r\n    self.request //同 context.request，请求对象\r\n    self.response //同 context.response 响应对象\r\n    self.context.request.queryData['name'] 可以获取 queryString 对应数据\r\n    self.context.request.formData['name'] 可以获取 post 数据\r\n    self.context.data(\"name\") 可以获取客户端传过来的 queryString 或 formData\r\n    self.context.request.cookie 获取来自客户的 cookie\r\n    self.context.respone.cookie 向客户端发送 cookie\r\n    se轩.context.session 访问 session 数据\r\n    */\r\n    self.name = 'Nokit NSP';\r\n    //init（初始化）完成后，需要调用 ready 方法，通知初始化完成\r\n    self.ready();\r\n};\r\n\r\n//默认方法，首次打开页面，会触发 load 方法\r\nIndexPresenter.prototype.load = function() {\r\n    var self = this;\r\n    //由于 nokit 为异步处理，调用 self.render() 方法向浏览器呈现页面.\r\n    //不要在 init 方法调用 self.render() \r\n    self.render();\r\n};\r\n\r\n//事件方法，可以绑定到页面中的 html 控件\r\nIndexPresenter.prototype.add = function() {\r\n    var self = this;\r\n    var val = parseInt(self.numBox.val());\r\n    self.numBox.val(++val);\r\n    self.numBox.css(\"border\",\"solid 1px red\");\r\n    self.render();\r\n};\r\n```\r\n\r\n页面绑定\r\n```html\r\n<!-- 绑定到处理器方法 -->\r\n<input type=\"button\" onclick=\"nsp.call('add')\" value='add' />\r\n```\r\n\r\n共享元素，将普通 DOM 元素通过 \"nsp-id\" 声明为客户端和服务端的共享元素，便可以在客户端和服务端同时操作指定元素，\r\n并能在回发时保持状态，类似 Asp.NET 的 WebForms，但理念、原理又非常不同，NSP 共享元素非常轻量，更简洁易用。\r\n```html\r\n<!-- 此元素可以在服务端和客户端同时访问 -->\r\n<input type=\"text\" value=\"hello\" nsp-id='test' />\r\n```\r\n```javascript\r\nIndexPresenter.prototype.add = function() {\r\n    var self = this;\r\n    //服务端提供类 jQuery 的元素操作 API (兼容部分常用 jQUery API)\r\n    self.test.val('你好'); \r\n    self.render();\r\n};\r\n```    \r\n\r\n## MVC\r\nNokit MVC 是一种设计简约、稳定、高效的 Web 应用开发模式。\r\n\r\n一般目录结构\r\n\r\n```javascript\r\n根目录\r\n│ app.js\r\n│ config.json\r\n├─controllers\r\n│    home.js\r\n├─models\r\n├─public\r\n│  └─style\r\n│       common.css\r\n└─views\r\n     date.html\r\n     home.html\r\n     master.html\r\n```\r\nviews 目录存放的是视图，视图和 NSP 的页面相似，支持 include 和 master，语法也完全相同，\r\n不同的是在 mvc 的视图中 this 指向的是模型，视图具有单一的责职 ，就是呈现模型中的数据。\r\ncontrollers 是控制器目录，单个文件为一个控制器，用来响应接受来自用户的请求，并传递给模型，\r\n然后，完成模型和视图的装配。\r\nmodels 为模型目录，nokit 对模型没有统一的要求和控制，应用的业务逻辑应在模型中完成。\r\n\r\nMVC 的控制器示例\r\n```javascript\r\n//定义控制器类型\r\nvar HomeController = module.exports = function() {};\r\n\r\n/*\r\n默认 action ，\r\n通常用户直接请求某一 url 会被路由到指定 controller 的默认 action\r\n*/\r\nHomeController.prototype.index = function() {\r\n    var self = this;\r\n    \r\n    /*\r\n    self.context 可以访问当前请求上下文对象\r\n    self.context.routeData[\"name\"] 可以获取路由数据\r\n    self.context.request.queryData['name'] 可以获取 queryString 对应数据\r\n    self.context.request.formData['name'] 可以获取 post 数据\r\n    self.context.data(\"name\") 可以获取客户端传过来的 queryString 或 formData\r\n    self.context.request.cookie 获取来自客户的 cookie\r\n    self.context.respone.cookie 向客户端发送 cookie\r\n    se轩.context.session 访问 session 数据\r\n    */\r\n    \r\n    //通过 self.render 方法呈现指定的视图，并进行模型绑定\r\n    self.render(\"home.html\", {\r\n        \"name\": \"Nokit MVC\"\r\n    });\r\n};\r\n```\r\n\r\nMVC 的 config.json 配置\r\n```javascript\r\n{\r\n    /*\r\n    配置 handler ，将指定的请求交由 MVC Handler 处理，支持正则表达式，\r\n    如示例，将应用的所有请求都交由 MVC 处理，\r\n    在找不到匹配的路由配置时，会转由 Static Handler 处理\r\n    */\r\n    \"handlers\": {\r\n        \"^/\": \"$./handlers/mvc\"\r\n    },\r\n    \"mvc\": {\r\n        /*\r\n        配置 MVC 相关代码文件的存放目录，指定 controller 和 view 的目录位置，\r\n        model 不用配置。\r\n        */\r\n        \"paths\": {\r\n            \"controller\": \"./controllers\",\r\n            \"view\": \"./views\"\r\n        },\r\n        /*\r\n        每一个路由至少需要指定 pattern(URL匹配模式) 和 target(目标contrller)\r\n        还可以通过配置 action 项指定对应的 action (controller方法)。\r\n        pattern 格式示例 \"/user/{userId}\" 其中 userId 是占位符变量，\r\n        可以在 controller 中通过 context.routeData['userId'] 获取。\r\n        */\r\n        \"routes\": {\r\n            \"/home\": \"./home\"\r\n            \"/\": \"./home\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n## REST\r\nNokit 用来开发 RESTful Service 是非常方便和简单的，通过简洁的 URL 路由配置，抽象出和资源对应的请求处理程序文件即可，\r\n可以在处理程序中，根据需求实现 get / post / put 等 HttpMethod 即可。同时，也可以用 Nokit MVC 来开发 RESTful Service。\r\n\r\n一般目录结构\r\n```javascript\r\n根目录\r\n│ app.js\r\n│ config.json\r\n├─public\r\n│  │  index.nsp\r\n│  └─style\r\n│       common.css\r\n└─api\r\n      user.js\r\n```\r\n\r\nREST 的资源控制器示例\r\n```javascript\r\n//定义资源控制器类型，通常一个资源类型视为一个控制器\r\nfunction UserController() {};\r\n\r\n//针对 User 的 post HttpMethod 处理方法\r\nUserController.prototype.post = function() {\r\n    var self = this;\r\n        \r\n    /*\r\n    self.context 可以访问当前请求上下文对象\r\n    self.context.routeData[\"name\"] 可以获取路由数据\r\n    self.context.request.queryData['name'] 可以获取 queryString 对应数据\r\n    self.context.request.formData['name'] 可以获取 post 数据\r\n    self.context.data(\"name\") 可以获取客户端传过来的 queryString 或 formData\r\n    self.context.request.body 可以访问请求的主体对象\r\n    */\r\n    \r\n    var routeData = self.context.routeData;\r\n    self.out(\"routeData:\" + routeData[\"userId\"]);\r\n};\r\n\r\n//针对 User 的 get HttpMethod 处理方法\r\nUserController.prototype.get = function() {\r\n    var self = this;\r\n    self.out(\"routeData:\" + routeData[\"userId\"]);\r\n};\r\n\r\n/*\r\n根据需求实现对应的 httpMethod 处理方法即可\r\n*/\r\n\r\nmodule.exports = UserController;\r\n```\r\n\r\nREST 的 config.json 配置\r\n```javascript\r\n{\r\n    /*\r\n    配置 handler ，将指定的请求交由 REST Handler 处理，支持正则表达式，\r\n    如示例，/api/... 开头的请求，交由 REST Handler 处理\r\n    */\r\n    \"handlers\": {\r\n        \"^/api/\": \"$./handlers/rest\"\r\n    },\r\n    \"rest\": {\r\n        \"path\": \"./rest\", //指定资源控制器的存放目录\r\n        /*\r\n        每一个路由至少需要指定 pattern(URL匹配模式) 和 target(目标contrller)\r\n        pattern 格式示例 \"/user/{userId}\" 其中 userId 是占位符变量，\r\n        REST 的路由配置没有 action 配置项。\r\n        */\r\n        \"routes\": {\r\n            \"/api/user/{userId}\": \"./user\"\r\n        }\r\n    }\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}